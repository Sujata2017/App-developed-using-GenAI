Here are detailed test cases for the provided Python code `app.py`, as well as the HTML and CSS files `index.html` and `styles.css`. The JSON configuration file is referenced but not directly tested here.

### Test Cases for `app.py`

#### Test Case 1: Basic Game Functionality
- **Steps:**
  1. Create a `GameBoard` instance.
  2. Create two `Player` instances.
  3. Simulate a dice roll and move the first player one step on the board.
  4. Simulate a dice roll and move the second player one step on the board.
- **Expected Result:**
  - The first player's position should increase by the dice roll value, without exceeding 100 or being affected by snakes or ladders.
  - The second player's position should increase similarly.

#### Test Case 2: Player Reaches End of Board
- **Steps:**
  1. Create a `GameBoard` instance.
  2. Create a `Player` instance at position 95.
  3. Simulate a dice roll resulting in a move that exceeds 100.
- **Expected Result:**
  - The player's final position should be 100, as the board wraps the position back if it exceeds the end.

#### Test Case 3: Snake Encounter
- **Steps:**
  1. Create a `GameBoard` instance.
  2. Create a `Player` instance at position 31.
  3. Simulate a dice roll that moves the player to position 32 (starting position of a snake).
- **Expected Result:**
  - The player's position should be updated to 10, the end position of the snake at 32.

#### Test Case 4: Ladder Encounter
- **Steps:**
  1. Create a `GameBoard` instance.
  2. Create a `Player` instance at position 3.
  3. Simulate a dice roll that moves the player to position 1 (starting position of a ladder).
- **Expected Result:**
  - The player's position should be updated to 38, the end position of the ladder at 1.

#### Test Case 5: Play Until Game Ends
- **Steps:**
  1. Create a `GameBoard` instance.
  2. Create two `Player` instances.
  3. Simulate dice rolls and player moves until one of the players reaches 100.
- **Expected Result:**
  - The game should end when one player's position reaches 100, and the winning player should be announced.

### Test Cases for `index.html` and `styles.css`

#### Test Case 6: Initial Page Load
- **Steps:**
  1. Load the `index.html` page in a browser.
- **Expected Result:**
  - The page should display "Snake and Ladder Game" with a grid representing the game board and a "Roll Dice" button.
  - The CSS should be applied, making the page visually appealing with a centered layout and a styled grid.

#### Test Case 7: Button Interaction
- **Steps:**
  1. Click the "Roll Dice" button.
- **Expected Result:**
  - The dice roll JavaScript function should be triggered (though the actual implementation is not provided, the expectation is that the button click performs an action, such as rolling the dice).

#### Test Case 8: Responsive Design
- **Steps:**
  1. Resize the browser window to a smaller size (e.g., mobile size).
  2. Observe the page layout.
- **Expected Result:**
  - The page should be responsive, with the button and the board repositioning or resizing appropriately to fit smaller screens.

#### Test Case 9: Grid Layout
- **Steps:**
  1. Load the `index.html` page.
  2. Inspect the #board element.
- **Expected Result:**
  - The grid should display 100 cells in a 10x10 layout, each representing a position on the board.

### Test Cases for `static/config.json`
The JSON file is static and does not require interactive testing. However, you can write unit tests to check if the file structure is correct and the data is as expected.

#### Test Case 10: JSON File Structure
- **Steps:**
  1. Parse the JSON file.
- **Expected Result:**
  - The JSON object should contain only two keys, `snakes` and `ladders`, each of which is an object containing specific key-value pairs representing the start and end positions of snakes and ladders.

These test cases cover a range of scenarios and should help in verifying that the application works as expected under various conditions.